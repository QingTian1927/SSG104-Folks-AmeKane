---
import { auth, db } from "../../../database/databaseUtils";
import type { ID } from "../../../database/models";
import { supabase } from "../../../database/supabase/client";
import type { languages } from "../../../i18n/ui";
import { useTranslations } from "../../../i18n/utils";
import Transaction from "../transaction.astro";

interface Props {
    userId?: ID;
    currency?: string;
    lang?: keyof typeof languages;
}

const { currency, lang = "vi", userId = await auth.user.getId() } = Astro.props;
const translate = useTranslations(lang);

if (!userId) {
    console.error("Cannot retrieve userId");
    return Astro.redirect("/500");
}

let currencySymbol;
if (!currency) {
    const { data: preferences, error: preferencesError } = await supabase
        .from("Preferences")
        .select("currency")
        .eq("user_id", userId)
        .single();
    if (preferencesError) {
        console.error(preferencesError);
        return Astro.redirect("/500");
    }
    currencySymbol = preferences.currency;
} else {
    currencySymbol = currency;
}

const { data: transactions, error: transactionsError } = await supabase
    .from("Transaction")
    .select()
    .eq("user_id", userId)
    .limit(30)
    .order("date", { ascending: false });
if (transactionsError) {
    console.error(transactionsError);
    return Astro.redirect("/500");
}
---

<div class="w-full h-full flex flex-col items-center justify-start gap-4">
    <div class="w-full flex items-center justify-start">
        <h2 class="grow font-semibold text-xl">
            {translate("dashboard.home.recent-transactions")}
        </h2>
        <a
            href="/dashboard/transactions"
            class="font-medium no-underline hover:underline text-xs lg:text-base text-zinc-600 dark:text-zinc-300"
            >{translate("dashboard.see-more")}</a
        >
    </div>

    <div
        class="w-full h-full flex flex-col items-start justify-start gap-2 lg:gap-0"
    >
        {
            transactions &&
                transactions.length > 0 &&
                transactions.map((transaction) => (
                    <Transaction
                        transaction={transaction}
                        currency={currencySymbol}
                    />
                ))
        }

        {
            (!transactions || transactions.length == 0) && (
                <div class="my-8 w-full h-full flex items-center justify-center gap-4">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="bi bi-cash h-[2rem] aspect-square fill-zinc-500"
                        viewBox="0 0 16 16"
                    >
                        <path d="M8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4" />
                        <path d="M0 4a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V6a2 2 0 0 1-2-2z" />
                    </svg>

                    <div class="flex flex-col items-start justify-center font-medium text-lg text-zinc-500">
                        <span class="inline-block">
                            {translate("dashboard.no.transaction")}.
                        </span>
                    </div>
                </div>
            )
        }
    </div>
</div>
